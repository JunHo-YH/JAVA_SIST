/*
 * 	연산자 종류
 * 	&& || ====> 결과값 (true, false)
 * 	(조건) && (조건)
 * 	=====   ======   비교연산자
 * 
 * 	(조건) || (조건)
 *  ====     ====   비교연산자
 *  
 *  결과값
 *  		&& => 직렬
 *  		
 *  		|| => 병렬
 *  ===================================================
 * 		조건 && 조건			     조건 || 조건
 *  ===================================================
 *  	true && true = true		true || true = true
 *  ===================================================
 *  	true && false = false	true || false = true
 *  ===================================================
		false && true = false	false || true = true
 *  ===================================================
		false && false = false	false || false = false
 *  ===================================================
 *  && : false가 한 개 이상이면 false, 두 개의 조건이 true => true
 *  	=> 범위안에 있는 경우
 *  	ex) 90에서 100 사이면 A
 *  		score >= 90 && score <= 100
 *	|| : true가 한 개 이사이면 true, 두 개의 조건이 false => false
 *		=> 범위 밖에 있는 경우
 *		ex) 0보다 작다, 100보다 크다
 *			score < 0 || score > 100
 *
 *	==> 검색, 로그인 (ID, PassWord)
 *	*** 효율적인 계산 : 오른쪽에 있는 조건을 수행하지 않을 경우
 *		조건 && 조건
 *		===   ====
 *		1
 *				2
 *			==
 *			3
 *		===============> && : 왼쪽에 있는 조건이 false일 경우 오른쪽을 계산하지 않는다. (결과값: false)
 *		===============> || : 왼쪽에 있는 조건이 true일 경우 오른쪽을 계산하지 않는다. (결과값: true)
 *
 */

public class 논리연산자 {

	public static void main(String[] args) {
		int a = 10;
		int b = 11;
		System.out.println("a < b && a == b? " + (a < b && a == b));
		// 왼쪽편에 조건이 false일 조건을 배치하면 속도가 더 빨라진다.
		
		System.out.println("a < b || a == b? " + (a < b || a == b));
		// 왼쪽의 조건이 true일 조건을 배치하면 속도가 빨라진다.
		
		
	}
}
