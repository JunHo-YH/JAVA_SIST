/*
 * 	연산자의 종류
 * 	단항연산자 (++, --, , (type))
 * 	이항연산자
 * 		= 산술연산자 ( +, -, *, /, %)
 * 		= 비교연산자 ( ==, !=, <, >, <=, >=)
 * 		= 논리연산자 ( &&, || ) 
 * 		= 대입연산자 ( =, +=, -= )
 * 	삼항연산자: (조건) ? 값1 : 값2
 * 
 * 	page 91 (연산자 우선순위)
 * 	단항연산자 => 산술연산자 => 비교연산자 => 논리연산자 => 삼항연산자 => 대입연산자
 *  =============================================================> 피룡하면 ()로 묶어서 처리
 *  
 *  산술연산자( *, /, % ) > ( +, - )
 *  비교연산자 ( <, >, <=, >= ) > ( ==, != )
 *  논리연산자 ( && ) > ( || )
 *  
 *  page 91 ~ 92
 *  		연산은 항상 같은 타입끼리 연산 => 같은 타입을 만들어서 처리
 *  		자동형변환: 큰 데이터형으로 변환
 *  		int + double => double + double
 *  		
 *  		int이하 => 연산이 되면 => int
 *  
 *  page 93
 *  		++, --: 1개 증가, 1개 감소
 *  		전치: 먼저 증가 => 다른 연산 수행
 *  		후치: 다른 연산을 먼저 수행 => 나중에 증가
 *  		
 *  		a는 1개 무조건 증가
 *  
 * 	page 97
 * 			정수 / 정수 = 정수 (소수점을 버린다)
 * 
 *  page 101
 *  		소스상에서 사용하는 모든 정수는 int (숫자 표기시에 21억 4천을 넘으면 오류 발생)
 *  page 102 ASC(아스키코드)
 *  		'A'   'a'   '0'
 *  		65     97    48
 *  		
 *  		==> 존재하지 않는 값 : null
 *  
 *  page 108
 *  		나머지 => 왼편 부호 ( - => 0값이 남는다, + -> +값이 남는다 )
 *  
 *  page 109
 *  		비교연산자: 결과값 => true, false
 *  
 *  page 114
 *  		논리연산자: && ( 두 조건이 true일 경우 => true ), || (둘 중에 한 개 이상이 true => true )
 *  
 *  page 118
 *  		효율적인 연산
 *  		조건 && 조건
 *  		false  ==> 수행하지 않는다. => false
 *  		
 *  		조건 || 조건
 *  		true   ==> 수행하지 않는다. => true
 *  
 *  page 130
 *  		삼항연산자
 *  
 *  page 132
 *  		대입연산자
 * 
 */
public class 연산자정리 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
