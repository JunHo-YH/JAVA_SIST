/*
 * 	비트(bit) => 0,1로 설정
 * 	모든 숫자를 => 2진법으로 변경후에 처리 => 최적화(속도), 가독성(분석)
 * 	쉬프트연산자(비트이동 연산자)
 * 		왼쪽이동 (<<) ==> 이동하고 빈공백에 0을 채운다.
 * 			10<<2
 * 			101000 ==> 40
 * 		오른쪽이동(>>) ==> 비트를 버린다.
 * 			10>>2
 * 			10(10) => 2
 * 
 * 	비트연산자 (&, |, ^)
 * 	& => *와 동일
 * 		1 1 => 1
 * 		1 0 => 0
 * 		0 1 => 0
 * 		0 0 => 0
 * 			27 & 9
 * 			======
 * 			1 1 0 1 1 => 27(2)
 * 			0 1 0 0 1 =>  9(2)
 * 			=========
 * 			0 1 0 0 1 => 9(2)
 * 	| => +와 동일
 * 		1 1 => 1
 * 		1 0 => 1
 * 		0 1 => 1
 * 		0 0 => 0
 * 		=========
 * 			27 & 9
 * 			======
 * 			1 1 0 1 1 => 27(2)
 * 			0 1 0 0 1 =>  9(2)
 * 			=========
 * 			1 1 0 1 1 => 27(2)
 * 		
 * 	^ => 다른 비트일 경우
 * 		1 1 => 0
 * 		1 0 => 1
 * 		0 1 => 1
 * 		0 0 => 0
 * 		=========
 * 		27 & 9
 * 		======
 * 		1 1 0 1 1 => 27(2)
 * 		0 1 0 0 1 =>  9(2)
 * 		=========
 * 		1 0 0 1 0 => 18(2)
 */
public class 비트연산자 {

	public static void main(String[] args) {
		// x<<y => x * 2^y
		System.out.println("10<<2= " + (10<<2));
		System.out.println("10>>2= " + (10>>2));
		System.out.println("10&2= " + (10&2));
		System.out.println("10|2= " + (10|2));
		System.out.println("10^2= " + (10^2));
	}

}
